#!/bin/bash
######################################################################
# These are all of your configurations for the script.
#
# !!! NOTE: You can create a new file called so_include and put your
# !!!       configs in there (beginning of this file to PLEASE DO NOT EDIT)
# !!!       so you don't have to refill them out every time you update.
#
# su_editor 	- the text editor you want to invoke.
# retention 	- how long to keep backups. (will prompt before delete)
#
# !!! NOTE: The "backup" settings are only required if you use the
# !!!       network backup functions!
#
# su_backupUser - your network backup user account
# su_backupHost - your network backup host address
# su_backupPath - your network backup file path
# su_backupArgs - (optional) extra arguments to execute during rsync
#                 NOTE: if backing up to a Synology NAS, you must
#                 specify --rsync-path=/usr/bin/rsync
######################################################################

su_editor=nano
retention=30

su_backupUser=
su_backupHost=
su_backupPath=
su_backupArgs=



######################################################################
# PLEASE DO NOT EDIT BELOW THIS. THANK YOU. I LOVE YOU. <3
######################################################################
# Written by Dustin Sabecky
######################################################################
# See CHANGELOG for details on changes to the script.
# https://github.com/dsabecky/securityonion_utilities/blob/master/CHANGELOG
######################################################################

wd=`dirname $(readlink -f $0)`
if [[ -f $wd/so_include ]]; then . $wd/so_include; fi

su_version=13
bold=$(tput bold)
uline=$(tput smul)
bu=${bold}${uline}
nrml=$(tput sgr0)

rc_log=/var/log/nsm/rule_changes.log
sc_log=/var/log/nsm/sid_changes.log
bk_dir=/var/backups

whoami=${SUDO_USER:=$USER}
function petc { echo "--- Press [Enter] to continue ---"; read -s; }



######################################################################
# Elevates you via sudo if you're not currently root.
######################################################################
if [[ $(id -u) != 0 ]]; then
	echo "Not running as root, please elevate via sudo."
	sudo "$0"
	exit
fi



######################################################################
# Security Onion Status (sostat).
#
# This basically runs sostat.
######################################################################
function su_soStat {
	junk=
	/usr/sbin/sostat | tee /var/log/nsm/sostat.log
	printf "\n\nLogged at /var/log/nsm/sostat.log\n"
	echo -n "Review log? [y/N]: "; read junk

	if [[ "$junk" == [yY] ]]; then $su_editor /var/log/nsm/sostat.log 2>/dev/null; fi
}



######################################################################
# Rule Update.
#
# This runs rule-update, logs differential changes to the
# downloaded.rules file for review, and archives logs over 50M.
######################################################################
function su_ruleUpdate {
	junk=
	if ! [[ -d /tmp/rules ]]; then mkdir /tmp/rules; fi
	cp /etc/nsm/rules/downloaded.rules /tmp/
	rule-update

	if ! [ -f "$rc_log" ]; then touch $rc_log; fi
	size=`du $rc_log | grep -Po "\d*"`
	if [[ $size -gt 50000 ]]; then count=`ls ${rc_log}.*.tar.gz 2>/dev/null | wc -l`; cd /var/log/nsm; tar -cvf rule_changes.log.$(($count+1)).tar.gz --remove-files rule_changes.log; fi

	tail -n +`grep -on "Begin Changes" $sc_log | tail -1 | cut -d":" -f1` $sc_log >> $rc_log
	diff /tmp/downloaded.rules /etc/nsm/rules/downloaded.rules >> $rc_log
	rm -f /tmp/downloaded.rules

	echo -n "Review changes? [y/N]: "; read junk
	if [[ "$junk" == [yY] ]]; then $su_editor $rc_log 2>/dev/null; fi
}



######################################################################
# Install New Signatures.
#
# Parses pulledpork.conf for your temp directory and what signatures
# you have enabled, since they are the only ones that it will install,
# #searches /media (by default), and copies them. Also verifies that
# LOCAL_NIDS_RULE_TUNING is enabled (optionally enables).
######################################################################
function su_signatureUpdate {
	temp_path=`cat /etc/nsm/pulledpork/pulledpork.conf | grep -i "^temp_path=" | cut -f2 -d'=' | cut -f1 -d'#'`
	local_tuning=`cat /etc/nsm/securityonion.conf | grep -i "^LOCAL_NIDS_RULE_TUNING=" | cut -f2 -d"="`
	searchdir=/media
	snort_version=`snort -V 2>&1 | grep -Po "(\d+\.){3}\d+" | tr -d .`

	if ! [[ "$local_tuning" == "yes" ]]; then
		junk=
		echo "Local NIDS tuning is not enabled! Manually installing signatures will not take effect until enabled."
		echo -n "Would you like to enable local NIDS tuning? [Y/n]: "; read junk; junk=${junk:=Y}
		if [[ "$junk" == [yY] ]]; then
			sed -i "`cat /etc/nsm/securityonion.conf | grep -in '^LOCAL_NIDS_RULE_TUNING=' | cut -f1 -d':'`s/=\w*/=yes/" /etc/nsm/securityonion.conf
			echo "LOCAL_NIDS_RULE_TUNING is now enabled!"

		else
			su_mainMenu
		fi
	fi

	cat /etc/nsm/pulledpork/pulledpork.conf | grep -i "^rule_url=" | cut -f2 -d'|' > /tmp/pulledpork_signatures
	sed -i "s/snortrules-snapshot/snortrules-snapshot-$snort_version/" /tmp/pulledpork_signatures
	echo "The following signatures will be searched for:"
	cat /tmp/pulledpork_signatures
	echo ""; echo "Enter the directory you would like to search (Q to cancel)."
	echo -n "[$searchdir]: "; read junk; searchdir=${junk:=$searchdir}

	if [[ "$junk" == [qQ] ]]; then su_mainMenu; fi
  
	count=1
	while [[ $count -le $(wc -l < /tmp/pulledpork_signatures) ]]; do
		temp_file=`head -$count /tmp/pulledpork_signatures | tail -1`
		find $searchdir -name "$temp_file" -type f -exec rsync -avP {} $temp_path \;
		if [[ -f $temp_path/$temp_file ]]; then chmod 444 $temp_path/$temp_file; fi
		count=$((count+1))
	done
  
	printf "\n\nCopy complete. Make sure to run rule update to commit your changes!\n"
	petc
}



######################################################################
# Snort Replicate.
#
# Replicates the template snort.conf over interface
# snort.conf's. This should be standard as it's really
# easy to accidentially brick the entire /etc/nsm folder
# doing this manually.
######################################################################
function su_snortReplicate {
	junk=
	conf=/etc/nsm/templates/snort/snort.conf
	echo "This will overwrite the snort.conf in your interfaces with /etc/nsm/templates/snort/snort.conf. Are you sure?"
	echo -n "[y/N]: "; read junk

	if [[ "$junk" == [yY] ]]; then
		find /etc/nsm -path $conf -prune -o -name "snort.conf" -exec cp -v $conf {} \;
		printf "\n\nReplication complete. Make sure to run rule update to commit your changes!\n"
	fi
	petc
}



######################################################################
# Sensor Restart.
#
# This restarts the sensors, which is useful if you do a
# rule update and your signature is malformed since the
# sensors fail to come back online.
######################################################################
function su_sensorRestart {
	junk=
	/usr/sbin/nsm_sensor_ps-restart | tee /var/log/nsm/sensor_restart.log
	printf "\n\nLogged at /var/log/nsm/sensor_restart.log\n"
	echo -n "Review log? [y/N]: "; read junk

	if [[ "$junk" == [yY] ]]; then $su_editor /var/log/nsm/sensor_restart.log 2>/dev/null; fi
}



######################################################################
# Clear Backlogged Events
#
# This simplifies clearing out "backlogged" (>15,000) events from the
# sguil database since attempting to flag them inside of squert just
# causes a timeout; manually doing this is too easy to mess up.
######################################################################
function su_clearBacklog {
	gid=; sid=

	echo "This will clear (flag) events with the specified signature (Q to cancel)."
	while ! [[ "$gid" =~ ^[0-9]+$ ]] && ! [[ "$gid" == [qQ] ]]; do echo -n "Enter the Generator ID (GID) [1]: "; read gid; gid=${gid:=1}; done
	if [[ "$gid" == [qQ] ]]; then su_mainMenu; fi
	while ! [[ "$sid" =~ ^[0-9]+$ ]] && ! [[ "$sid" == [qQ] ]]; do echo -n "Enter the Signature ID (SID): "; read sid; done
	if [[ "$sid" == [qQ] ]]; then su_mainMenu; fi

	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e "update event set status=1, last_modified=\"2000-01-01 00:00:00\", last_uid=\"sguil\" where event.status=0 and event.signature_gen like \"$gid\" and event.signature_id like \"$sid\";"
	petc
}



######################################################################
# Modify Snort Configuration.
#
# Opens snort.conf in a text editor, and creates a backup
# BEFORE you make any changes into the /var/backups/snort
# directory.
######################################################################
function su_editSnort {
	backup=$bk_dir/snort/snort.conf.`date +%m%d%Y_%H%M%S`

	if ! [[ -d $bk_dir/snort ]]; then mkdir $bk_dir/snort; fi

	cp /etc/nsm/templates/snort/snort.conf $backup
	printf "Backup created at $backup\n"
	$su_editor /etc/nsm/templates/snort/snort.conf 2>/dev/null

	count=`find $bk_dir/snort -name "snort.conf.*" -mtime +$retention | wc -l`
	if [[ $count -gt 0 ]]; then
		echo "You currently have $count backups older than $retention days."
		echo -n "Prune? [y/N]: "; read junk

		if [[ "$junk" == [yY] ]]; then
			find $bk_dir/snort -name "snort.conf.*" -mtime +$retention -exec rm -f {} \;
			petc
		fi
	fi

	echo "Make sure to run snort replicate to commit your changes!"
	petc
}



######################################################################
# Modify PulledPork "Enable Signatures" Config (enablesid.conf)
#
# Opens enablesid.conf in a text editor, and creates a backup
# BEFORE you make any changes into the /var/backups/pulledpork
# directory.
######################################################################
function su_editEnSID {
	backup=$bk_dir/pulledpork/enablesid.conf.`date +%m%d%Y_%H%M%S`

	if ! [[ -d $bk_dir/pulledpork ]]; then mkdir $bk_dir/pulledpork; fi

	cp /etc/nsm/pulledpork/enablesid.conf $backup
	printf "Backup created at $backup\n"
	$su_editor /etc/nsm/pulledpork/enablesid.conf 2>/dev/null

	count=`find $bk_dir/pulledpork -name "enablesid.conf.*" -mtime +$retention | wc -l`
	if [[ $count -gt 0 ]]; then
		echo "You currently have $count backups older than $retention days."
		echo -n "Prune? [y/N]: "; read junk

		if [[ "$junk" == [yY] ]]; then
			find $bk_dir/pulledpork -name "enablesid.conf.*" -mtime +$retention -exec rm -f {} \;
			petc
		fi
	fi

	echo "Make sure to run rule update to commit your changes!"
	petc
}



######################################################################
# Modify PulledPork "Modify Signatures" Config (modifysid.conf)
#
# Opens modifysid.conf in a text editor, and creates a backup
# BEFORE you make any changes into the /var/backups/pulledpork
# directory.
######################################################################
function su_editModSID {
	backup=$bk_dir/pulledpork/modifysid.conf.`date +%m%d%Y_%H%M%S`

	if ! [[ -d $bk_dir/pulledpork ]]; then mkdir $bk_dir/pulledpork; fi

	cp /etc/nsm/pulledpork/modifysid.conf $backup
	printf "Backup created at $backup\n"
	$su_editor /etc/nsm/pulledpork/modifysid.conf 2>/dev/null

	count=`find $bk_dir/pulledpork -name "modifysid.conf.*" -mtime +$retention | wc -l`
	if [[ $count -gt 0 ]]; then
		echo "You currently have $count backups older than $retention days."
		echo -n "Prune? [y/N]: "; read junk

		if [[ "$junk" == [yY] ]]; then
			find $bk_dir/pulledpork -name "modifysid.conf.*" -mtime +$retention -exec rm -f {} \;
			petc
		fi
	fi

	echo "Make sure to run rule update to commit your changes!"
	petc
}



######################################################################
# Modify PulledPork "Disable Signatures" Config (disablesid.conf)
#
# Opens disablesid.conf in a text editor, and creates a backup
# BEFORE you make any changes into the /var/backups/pulledpork
# directory.
######################################################################
function su_editDisSID {
	backup=$bk_dir/pulledpork/disablesid.conf.`date +%m%d%Y_%H%M%S`

	if ! [[ -d $bk_dir/pulledpork ]]; then mkdir $bk_dir/pulledpork; fi

	cp /etc/nsm/pulledpork/disablesid.conf $backup
	printf "Backup created at $backup\n"
	$su_editor /etc/nsm/pulledpork/disablesid.conf 2>/dev/null

	count=`find $bk_dir/pulledpork -name "disablesid.conf.*" -mtime +$retention | wc -l`
	if [[ $count -gt 0 ]]; then
		echo "You currently have $count backups older than $retention days."
		echo -n "Prune? [y/N]: "; read junk

		if [[ "$junk" == [yY] ]]; then
			find $bk_dir/pulledpork -name "disablesid.conf.*" -mtime +$retention -exec rm -f {} \;
			petc
		fi
	fi

	echo "Make sure to run rule update to commit your changes!"
	petc
}



######################################################################
# Edit Rules
#
# Lists rules enabled via snort.conf for editing. Provides backup
# and pruning features as well. Backups are stored in the following
# location: /var/backups/rules.
######################################################################
function su_ruleMenu {
	RULE_PATH=`cat /etc/nsm/templates/snort/snort.conf | grep "^var RULE_PATH" | cut -f3 -d' '`
	rules=`cat /etc/nsm/templates/snort/snort.conf | grep "^include .*\.rules" | grep -v "downloaded\.rules" | cut -f2 -d' '`
	rules="${rules//\$RULE_PATH/$RULE_PATH}"
	total=`echo "$rules" | wc -l`

	while [[ 2 -gt 1 ]]; do
		clear
		count=1

		printf "Security Onion Utilities (ver. $su_version) >> Edit Rules\n\nThe following are your currently enabled rule files as configured in snort.conf.\n\n"

		while [[ $count -le $total ]]; do
			echo "[$count] `echo \"$rules\" | head -$count | tail -1 | rev | cut -f1 -d'/' | rev`"
			count=$((count+1))
		done
		echo "[Q] Return to main menu"; echo ""
		echo -n "Option: "; read junk

		if [[ "$junk" == [0qQ] ]]; then
			break

		elif ! [[ "$junk" =~ ^[0-9]+$ ]] || [[ "$junk" -gt "$total" ]]; then echo ""

		elif [[ "$junk" -le "$total" ]]; then

			filePath=`echo "$rules" | head -$junk | tail -1`
			file=`echo "$filePath" | rev | cut -f1 -d'/' | rev`
			backup=$bk_dir/rules/$file.`date +%m%d%Y_%H%M%S`

			if ! [[ -d $bk_dir/rules ]]; then mkdir $bk_dir/rules; fi

			cp $filePath $backup
			clear
			printf "Backup created at $backup\n"
			$su_editor $filePath

			count=`find $bk_dir/rules -name "$file.*" -mtime +$retention | wc -l`
			if [[ $count -gt 0 ]]; then
				echo "You currently have $count backups older than $retention days."
				echo -n "Prune? [y/N]: "; read junk

				if [[ "$junk" == [yY] ]]; then
					find $bk_dir/rules -name "$rule.*" -mtime +$retention -exec rm -f {} \;
					petc
				fi
			fi

			echo "Make sure to restart your sensors to commit changes!"
			petc
		fi
	done
}



######################################################################
# Backup /etc/nsm locally.
#
# This creates a backup of /etc/nsm in the /var/backups
# directory.
######################################################################
function su_etcBackup {
	backup=/var/backups/etc_backup_`date +%m%d%Y_%H%M%S`.tar.gz
	echo "Running backup of /etc/nsm..."
	tar -czvf $backup /etc/nsm | tee /var/log/nsm/etc_backup.log
	printf "\n\nBackup complete. Available at: $backup\nLog available at /var/log/nsm/etc_backup.log\n"
	petc
}



######################################################################
# Backup /etc/nsm to network.
#
# This copies your local backups of /etc/nsm to the designated
# network location.
######################################################################
function su_etcBackupNet {
	junk=
	if ! [[ "$su_backupUser" ]] || ! [[ "$su_backupHost" ]] || ! [[ "$su_backupPath" ]]; then echo "Backup settings not configured!"; petc; su_mainMenu; fi

	echo "This will copy your local backups of /etc/nsm to $su_backupHost."
	echo -n "Proceed? [Y/n]: "; read junk; junk=${junk:=Y}

	if [[ "$junk" == [yY] ]]; then
		rsync -aRvP $su_backupArgs /var/backups/etc_backup_*.tar.gz $su_backupUser@$su_backupHost:$su_backupPath
		petc
	fi
}



######################################################################
# Backup dailylogs to network.
#
# This performs an rsync of your /nsm/sensor_data/<int>/dailylogs
# to your designated network location.
######################################################################
function su_dailyBackupNet {
	if ! [[ "$su_backupUser" ]] || ! [[ "$su_backupHost" ]] || ! [[ "$su_backupPath" ]]; then echo "Backup settings not configured!"; petc; su_mainMenu; fi
	
	find /nsm/sensor_data/ -name "dailylogs" -type d > /tmp/dailylogs_filelist
	rsync -arvP $su_backupArgs --files-from=/tmp/dailylogs_filelist / $su_backupUser@$su_backupHost:$su_backupPath
	petc
}



######################################################################
# Backup brologs to network.
#
# This performs an rsync of your /nsm/bro/logs to your designated
# network location.
######################################################################
function su_broBackupNet {
	if ! [[ "$su_backupUser" ]] || ! [[ "$su_backupHost" ]] || ! [[ "$su_backupPath" ]]; then echo "Backup settings not configured!"; petc; su_mainMenu; fi

	rsync -arvP $su_backupArgs /nsm/bro/logs $su_backupUser@$su_backupHost:$su_backupPath
	petc
}



######################################################################
# List Users
#
# This gives a list of current users.
######################################################################
function su_listUsers {
	printf "List of users:\n\n"
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e 'select username from user_info where username != "auto" and password != "LOCKED";'
	printf "\n\n"; petc
}



######################################################################
# Add User.
#
# This exists purely due to nsm_server_user-add doesn't properly
# sanitize user input and thus executes any special characters
# entered. This is a security issue, but also makes it impossible
# to set a "good" password.
######################################################################
function su_createUser {
	usr=

	echo "Please enter the username (Q to cancel)."
	echo "NOTE: Username must be alpha-numberic."
	while [[ -z "$usr" ]]; do echo -n "Username: "; read usr; done
	if [[ "$usr" == [qQ] ]]; then su_mainMenu; fi

	/usr/bin/sguild -c /etc/nsm/securityonion/sguild.conf -C /etc/nsm/securityonion/certs/ -adduser $usr
	petc
}



######################################################################
# Change User Password.
#
# This exists purely due to nsm_server_user-passwd doesn't properly
# sanitize user input and thus executes any special characters
# entered. This is a security issue, but also makes it impossible
# to set a "good" password. Also lists current users to ease the
# process.
######################################################################
function su_changePassword {
	usr=
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e 'select username from user_info where username != "auto" and password != "LOCKED";'

	echo ""; echo "Please enter the username (Q to cancel)."
	while [[ -z "$usr" ]]; do echo -n "Username: "; read usr; done
	if [[ "$usr" == [qQ] ]]; then su_mainMenu; fi

	/usr/bin/sguild -c /etc/nsm/securityonion/sguild.conf -C /etc/nsm/securityonion/certs/ -changepasswd $usr
	petc
}



######################################################################
# Disable User.
#
# Lists current users to ease the process.
######################################################################
function su_disableUser {
	usr=
	mysql --defaults-file=/etc/mysql/debian.cnf -Dsecurityonion_db -e 'select username from user_info where username != "auto" and password != "LOCKED";'

	echo ""; echo "Please enter the username (Q to cancel)."
	while [[ -z "$usr" ]]; do echo -n "Username: "; read usr; done
	if [[ "$usr" == [qQ] ]]; then su_mainMenu; fi

	/usr/bin/sguild -disableuser $usr
	petc
}



######################################################################
# Create desktop shortcut.
#
# This will create a clickable shortcut.
######################################################################
function su_createDesktop {
	if [[ "$whoami" == "root" ]]; then
		if ! [[ -d /root/Desktop ]]; then mkdir /root/Desktop; fi
		desktopPath=/root/Desktop
	else
		if ! [[ -d /home/$whoami/Desktop ]]; then mkdir /home/$whoami/Desktop; fi
		desktopPath=/home/$whoami/Desktop
	fi
	echo "This will create a desktop shortcut at the following location (Q to cancel)."
	echo -n "[$desktopPath]: "; read junk; desktopPath="${junk:=$desktopPath}"
	if [[ "$junk" == [qQ] ]]; then su_mainMenu; fi
  
printf "[Desktop Entry]
Version=$su_version
Exec=`readlink -f $0`
Name=Utilities
GenericName=Utilities
Encoding=UTF-8
Terminal=true
Type=Application
Icon=/usr/share/pixmaps/security-onion.ico" > $desktopPath/securityonion-utilities.desktop

	if ! [[ "$whoami" == "root" ]]; then chown $whoami $desktopPath/securityonion-utilities.desktop; fi
	chmod 755 $desktopPath/securityonion-utilities.desktop
	echo "Shortcut created at: $desktopPath/securityonion-utilities.desktop"
	petc
}



######################################################################
# Check Log Size
#
# This will give you a summary size of the entered days log files.
# This includes the pcap (dailylog) and bro logs.
######################################################################
function su_checkLogSize {
	today=`date +%Y-%m-%d`
	echo "This will display in megabytes the size of the entered days logs."
	echo -n "Enter date [$today]: "; read junk
	junk=${junk:=$today}

	find /nsm/sensor_data -name "$junk" -exec du -shb {} \; | grep -oP "\d*" > /tmp/size
	find /nsm/bro/logs -name "$junk" -exec du -shb {} \;  | grep -oP "\d*" >> /tmp/size

	sum=0
	for i in `cat /tmp/size`; do
		sum=$(($sum + $i))
	done
	rm -f /tmp/size
	echo "Total log size of $junk: $((($sum / 1024) / 1024))MB"
	petc
}



######################################################################
# SSH Key Authentication
#
# This will generate an ssh key utilizing OpenSSH and syncronize it
# to your backup host. This is a big convenience as it will let you do
# your backups without asking to authenticate EVEN IF you change your
# password. Aren't SSH keys fantastic?
######################################################################
function su_createSSHAuth {
	if ! [[ "$su_backupUser" ]] || ! [[ "$su_backupHost" ]] || ! [[ "$su_backupPath" ]]; then echo "Backup settings not configured!"; petc; su_mainMenu; fi

	echo "This will create an SSH key. Do you want to continue?"
	echo -n "[y/N]: "; read junk; if ! [[ "$junk" == [yY] ]]; then su_mainMenu; fi
	printf "\n"; ssh-keygen -N "" -f /root/.ssh/id_rsa <<< y; printf "\n\n"

	echo "Now you'll need to authenticate one last time to complete the password sync."
	ssh-copy-id -i /root/.ssh/id_rsa $su_backupUser@$su_backupHost; printf "\n\n"
	petc
}


######################################################################
# Main Menu
#
# These are all the options (fancytext stripped)
#
# === Tools
#  1. SecurityOnion Status (sostat)
#  2. Update Rules
#  3. Replicate Snort
#  4. Install New Signatures
#  5. Restart Sensors
#  6. Clear Backlogged Events
#
# === Modify Configs
#  7. snort.conf
#  8. enablesid.conf
#  9. modifysid.conf
# 10. disablesid.conf
# 11. Edit Rules
#
# === Backups
# 12. Backup /etc/nsm (local)
# 13. Backup /etc/nsm (network)
# 14. Backup dailylogs (network)
# 15. Backup brologs (network)
#
# === User Management
# 16. List Users
# 17. Add User
# 18. Change User Password
# 19. Disable User
#
# === Misc
# 20. Create Desktop Shortcut
# 21. Check Log Size (day)
# 22. SSH Key Authentication
#  0. Quit
######################################################################
function su_mainMenu {
	while [[ 2 -gt 1 ]]; do
		clear
printf "Security Onion Utilities (ver. $su_version)

=== Tools				=== Backups
 [${bu}1${nrml}] SecurityOnion Status (sostat) 	[${bu}12${nrml}] Backup /etc/nsm  (local)
 [${bu}2${nrml}] Rule ${bu}U${nrml}pdate 			[${bu}13${nrml}] Backup /etc/nsm  (network)
 [${bu}3${nrml}] Snort ${bu}R${nrml}eplicate 			[${bu}14${nrml}] Backup dailylogs (network)
 [${bu}4${nrml}] ${bu}I${nrml}nstall New Signatures		[${bu}15${nrml}] Backup brologs   (network)
 [${bu}5${nrml}] Sensor Restart 			
 [${bu}6${nrml}] Clear Backlogged Events 		=== User Management
 					[${bu}16${nrml}] List Users
=== Modify Configs 			[${bu}17${nrml}] Add User
 [${bu}7${nrml}] ${bu}s${nrml}nort.conf 			[${bu}18${nrml}] Change User Password
 [${bu}8${nrml}] ${bu}e${nrml}nablesid.conf 			[${bu}19${nrml}] Disable User
 [${bu}9${nrml}] ${bu}m${nrml}odifysid.conf 			
[${bu}10${nrml}] ${bu}d${nrml}isablesid.conf 			=== Misc
[${bu}11${nrml}] Edit Rules				[${bu}20${nrml}] Create Desktop Shortcut
					[${bu}21${nrml}] Check Log Size (day)
					[${bu}22${nrml}] SSH Key Authentication
					 [${bu}0${nrml}] Quit\n\n"

		echo -n "Option: "; read junk

		if [[ "$junk" == [1] ]]; then
			clear
			su_soStat

		elif [[ "$junk" == [2uU] ]]; then
			clear
			su_ruleUpdate

		elif [[ "$junk" == [3rR] ]]; then
			clear
			su_snortReplicate
	  
		elif [[ "$junk" == [4iI] ]]; then
			clear
			su_signatureUpdate

		elif [[ "$junk" == 5 ]]; then
			clear
			su_sensorRestart

		elif [[ "$junk" == 6 ]]; then
			clear
			su_clearBacklog

		elif [[ "$junk" == [7sS] ]]; then
			clear
			su_editSnort

		elif [[ "$junk" == [8eE] ]]; then
			clear
			su_editEnSID

		elif [[ "$junk" == [9mM] ]]; then
			clear
			su_editModSID

		elif [[ "$junk" == 10 || "$junk" == [dD] ]]; then
			clear
			su_editDisSID

		elif [[ "$junk" == 11 ]]; then
			clear
			su_ruleMenu

		elif [[ "$junk" == 12 ]]; then
			clear
			su_etcBackup

		elif [[ "$junk" == 13 ]]; then
			clear
			su_etcBackupNet

		elif [[ "$junk" == 14 ]]; then
			clear
			su_dailyBackupNet

		elif [[ "$junk" == 15 ]]; then
			clear
			su_broBackupNet

		elif [[ "$junk" == 16 ]]; then
			clear
			su_listUsers

		elif [[ "$junk" == 17 ]]; then
			clear
			su_createUser

		elif [[ "$junk" == 18 ]]; then
			clear
			su_changePassword

		elif [[ "$junk" == 19 ]]; then
			clear
			su_disableUser
	  
		elif [[ "$junk" == 20 ]]; then
			clear
			su_createDesktop

		elif [[ "$junk" == 21 ]]; then
			clear
			su_checkLogSize

		elif [[ "$junk" == 22 ]]; then
			clear
			su_createSSHAuth

		elif [[ "$junk" == [0qQ] ]]; then
			clear
			exit

		else
			clear
		fi
	done
}



######################################################################
# Bootstrap main menu during script initialization.
######################################################################
su_mainMenu